"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[10849],{15680:(e,t,i)=>{i.d(t,{xA:()=>u,yg:()=>d});var a=i(96540);function s(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,a)}return i}function n(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){s(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function r(e,t){if(null==e)return{};var i,a,s=function(e,t){if(null==e)return{};var i,a,s={},o=Object.keys(e);for(a=0;a<o.length;a++)i=o[a],t.indexOf(i)>=0||(s[i]=e[i]);return s}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)i=o[a],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(s[i]=e[i])}return s}var l=a.createContext({}),p=function(e){var t=a.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):n(n({},t),e)),i},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var i=e.components,s=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(i),g=s,d=c["".concat(l,".").concat(g)]||c[g]||m[g]||o;return i?a.createElement(d,n(n({ref:t},u),{},{components:i})):a.createElement(d,n({ref:t},u))}));function d(e,t){var i=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var o=i.length,n=new Array(o);n[0]=g;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r[c]="string"==typeof e?e:s,n[1]=r;for(var p=2;p<o;p++)n[p]=i[p];return a.createElement.apply(null,n)}return a.createElement.apply(null,i)}g.displayName="MDXCreateElement"},80684:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>n,default:()=>m,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var a=i(58168),s=(i(96540),i(15680));const o={id:"optimising-textures",title:"Optimising Textures",sidebar_label:"Textures",description:"Tips on how to reduce texture size, both from within Playable's plugin window and externally.",keywords:["texture","optimise","reduce","size","playable","luna"]},n=void 0,r={unversionedId:"playable/optimise-your-builds/optimising-assets/optimising-textures",id:"playable/optimise-your-builds/optimising-assets/optimising-textures",title:"Optimising Textures",description:"Tips on how to reduce texture size, both from within Playable's plugin window and externally.",source:"@site/docs/playable/optimise-your-builds/optimising-assets/optimising-textures.md",sourceDirName:"playable/optimise-your-builds/optimising-assets",slug:"/playable/optimise-your-builds/optimising-assets/optimising-textures",permalink:"/docs/playable/optimise-your-builds/optimising-assets/optimising-textures",draft:!1,tags:[],version:"current",frontMatter:{id:"optimising-textures",title:"Optimising Textures",sidebar_label:"Textures",description:"Tips on how to reduce texture size, both from within Playable's plugin window and externally.",keywords:["texture","optimise","reduce","size","playable","luna"]},sidebar:"gettingStarted",previous:{title:"Sounds",permalink:"/docs/playable/optimise-your-builds/optimising-assets/optimising-sounds"},next:{title:"Runtime Analysis",permalink:"/docs/playable/optimise-your-builds/runtime-analysis"}},l={},p=[{value:"Max size",id:"max-size",level:3},{value:"Format",id:"format",level:3},{value:"Apply PNG Compression types",id:"apply-png-compression-types",level:3},{value:"Custom script &amp; Custom script extension",id:"custom-script--custom-script-extension",level:3},{value:"Per-texture settings",id:"per-texture-settings",level:2},{value:"Converting Textures to RGBA 32",id:"converting-textures-to-rgba-32",level:2},{value:"Symmetrical Textures",id:"symmetrical-textures",level:2}],u={toc:p},c="wrapper";function m(e){let{components:t,...o}=e;return(0,s.yg)(c,(0,a.A)({},u,o,{components:t,mdxType:"MDXLayout"}),(0,s.yg)("p",null,"Textures often take most of the build size due to specifics of the data they hold: big arrays of pixels. Luckily enough, Luna targets HTML5 platform, which provides a handful of formats available with no additional effort."),(0,s.yg)("p",null,"Let's start by navigating to the ",(0,s.yg)("strong",{parentName:"p"},"Assets")," section and the ",(0,s.yg)("strong",{parentName:"p"},"Textures")," tab in Luna UI:"),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-medium",src:i(95107).A,width:"2224",height:"1720"})),(0,s.yg)("p",null,"The highlighted part of the screenshot above is the section that describes parameters applied to exported textures by default. Let's break it down section by section."),(0,s.yg)("h3",{id:"max-size"},"Max size"),(0,s.yg)("p",null,"This control allows to set maximum allowed size of a texture. If a texture exceeds the size in any dimension, it will be scaled down proportionally and its dimensions will be updated in metadata as well. That means that sprites, UV mappings and other elements working with a texture will remain valid, but will simply have less pixels. It's a developer's responsibility to not store pixel values for manipulating the textures (which is bad practice anyway) - the only bit that resizing can break is when someone attempts to read hard-coded region of an image (hard-coded in pixels, of course)."),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"As a general rule, there is never any reason for a playable to have Textures or Sprites that are larger than 1024x1024.")),(0,s.yg)("p",null,"Querying the ",(0,s.yg)("inlineCode",{parentName:"p"},"width")," and ",(0,s.yg)("inlineCode",{parentName:"p"},"height")," properties of the texture object will return updated values as well."),(0,s.yg)("h3",{id:"format"},"Format"),(0,s.yg)("p",null,"This controls the format of the texture. By default, Luna uses PNG32 format, which is a lossless compression format supporting RGB and Alpha channels."),(0,s.yg)("admonition",{title:"What about HDR?",type:"info"},(0,s.yg)("p",{parentName:"admonition"},"Luna re-encodes HDR textures, including HDR cubemaps, using RGBM encoding scheme. This is done to safely target all WebGL 1.0 installations avoiding the reliance upon availability of float-based texture formats usually used for storing HDR data.")),(0,s.yg)("p",null,"To determine the most suitable format, one could follow the below set of rules:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("strong",{parentName:"li"},"High-fidelity elements with alpha channel"),", like crisp UI elements, are best to keep in PNG32 or PNG8 formats, depending on the amount of colors used"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("strong",{parentName:"li"},"High-fidelity textures without alpha channel"),", like Normal Maps, are best to keep in PNG24 format"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("strong",{parentName:"li"},"Opaque textures"),", less sensitive to compression artifacts, are good candidates for JPEG format")),(0,s.yg)("p",null,"Generally, JPEG format provides best compression ratios for many situations and is preferred if alpha channel is not required. This format, however, can introduce compression artifacts, which can be minimized by raising compression quality. However, some images are best compressed with PNG, especially the ones that have big continuous blocks of constant color."),(0,s.yg)("h3",{id:"apply-png-compression-types"},"Apply PNG Compression types"),(0,s.yg)("p",null,"PNG is well-known for being able to be compressed to reduce size, whilst maintain quality images. There are instances where it can provide significant size reduction without affecting visual quality by brute-forcing compression algorithms available for PNG format and also removing optional metadata like graphics editor's tags. It can be quite slow for large images, though: processing a single PNG file can take several seconds, thus it is disabled by default in Luna."),(0,s.yg)("admonition",{type:"info"},(0,s.yg)("p",{parentName:"admonition"},"Selecting your option will apply a PNG compression on PNG textures only.")),(0,s.yg)("p",null,"Compression types - to choose which type of compression you need, there are some brief explanations on each type to help choose size / image quality trade offs."),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("inlineCode",{parentName:"p"},"PNGQuant Best quality")," - runs all the images through a compression algorithm that reduces size while not impacting visual quality. This helps to reduce size slightly but maintains a better quality of image.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("inlineCode",{parentName:"p"},"PNGQuant Smallsize")," - selecting this option will reduce the size of the PNG but it may also reduce image quality. Some of the visual changes may not be noticeable, but it is advisable to make sure all image quality trade offs are acceptable.")),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("p",{parentName:"li"},(0,s.yg)("inlineCode",{parentName:"p"},"PNG crush")," - very slightly reduces size but quality may or may not be affected. It's also possible that file size may not be altered at all."))),(0,s.yg)("p",null,"If the size of your playable is not an issue then selecting ",(0,s.yg)("inlineCode",{parentName:"p"},"None")," will not alter or change the PNG files."),(0,s.yg)("p",null,"If you don't require a compression of all PNG files, you also have the option to pick specific PNG files to be compressed from your project files."),(0,s.yg)("p",null,"This will require permission access in build process please refer to ",(0,s.yg)("a",{parentName:"p",href:"/docs/playable/setup/export-failures"},"PNGQuant Access Permission"),"."),(0,s.yg)("h3",{id:"custom-script--custom-script-extension"},"Custom script & Custom script extension"),(0,s.yg)("p",null,"There are instances when a developer can find their own combination of settings for ",(0,s.yg)("inlineCode",{parentName:"p"},"pngcrush")," or even resort to a custom tool, like ",(0,s.yg)("inlineCode",{parentName:"p"},"pngquat")," (which we highly recommend to consider for PNG files with limited colors). To provide an ability to use arbitrary custom tools, developers can specify custom script that is going to be executed by Luna against a texture. It accepts the following placeholders:"),(0,s.yg)("ul",null,(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"{input}")," is replaced with full path to original PNG file (Luna always exports textures as PNG files in the first place)"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"{output}")," is replaced with the full path to the destination"),(0,s.yg)("li",{parentName:"ul"},(0,s.yg)("inlineCode",{parentName:"li"},"{temp}")," is replaced with a temporary path the script might use as a scratch pad")),(0,s.yg)("p",null,"In order for Luna to properly compute the output path, developers should also supply the extension of the output file their custom script will write."),(0,s.yg)("admonition",{title:"Resizing textures with custom scripts",type:"info"},(0,s.yg)("p",{parentName:"admonition"},"Luna will read the output texture file to identify its pixel size and update the metadata appropriately. It means that developers can do arbitrary resizing of the texture without having to worry how to account for that in the code that uses the texture. Users of this option, however, should be careful regarding preserving aspect ratio as Luna will not enforce it to stay the same.")),(0,s.yg)("h2",{id:"per-texture-settings"},"Per-texture settings"),(0,s.yg)("p",null,'All of the above settings are also available on a per-folder and per-texture level. Developers can choose a folder of a file by ticking a checkbox in "Per-texture settings" section of the window and use the same fields to tweak parameters of a specific texture(s):'),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-medium",src:i(36859).A,width:"2224",height:"1720"})),(0,s.yg)("h2",{id:"converting-textures-to-rgba-32"},"Converting Textures to RGBA 32"),(0,s.yg)("p",null,"If you have encountered the following warning in your build log:"),(0,s.yg)("pre",null,(0,s.yg)("code",{parentName:"pre"},'Change its format from DXT5 to "RGBA 32 bit" to speed up export\n')),(0,s.yg)("p",null,"Simply follow the steps below to make the necessary changes."),(0,s.yg)("p",null,"Highlight all textures you want to convert in your project folder. In the inspector at the bottom there is a 'Format' option with a drop down field, open the drop down and select RGBA 32 bit, after doing so click apply. This will update their import settings."),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-small",src:i(36475).A,width:"548",height:"772"})),(0,s.yg)("br",null)," ",(0,s.yg)("br",null),(0,s.yg)("p",null,"To make sure the changes are applied, right click on the highlighted textures and select reimport."),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-medium",src:i(6521).A,width:"1046",height:"292"})),(0,s.yg)("br",null),(0,s.yg)("br",null),(0,s.yg)("p",null,"After this process is complete you are good to go!"),(0,s.yg)("h2",{id:"symmetrical-textures"},"Symmetrical Textures"),(0,s.yg)("p",null,"If you have any roughly symmetrical textures that would produce a similar enough result if cut in half and mirrored, you can do just that to reduce your playable's size further."),(0,s.yg)("p",null,"For example here we have a mostly symmetrical texture:"),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-medium",src:i(6437).A,width:"933",height:"545"})),(0,s.yg)("p",null,"Split down the centre:"),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-medium",src:i(7645).A,width:"933",height:"549"})),(0,s.yg)("p",null,"And in the scene adjust it to make it look like one image:"),(0,s.yg)("p",null,(0,s.yg)("img",{alt:"images-medium",src:i(14116).A,width:"851",height:"427"})))}m.isMDXComponent=!0},6437:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/full-tex-be1600fe04ac3ea31a3d4153d2a078c2.png"},7645:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/half-tex-c363b8bc4f2318938b09f8615cc85ff3.png"},14116:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/mirrored-tex-5b0ca0d8755b88982c0ad08c0860a48d.png"},36475:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/import-settings-select-rbga32bit-dceb323b6ef02af751ab27e6c2357569.jpg"},6521:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/select-all-reimport-b3424392050a293f8d053025b4fe9ab0.jpg"},95107:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/textures-general-104dede58a1461b50b8404419fb1792f.png"},36859:(e,t,i)=>{i.d(t,{A:()=>a});const a=i.p+"assets/images/textures-per-file-09f36f72cd9d19b26b4612a38989dcf2.png"}}]);