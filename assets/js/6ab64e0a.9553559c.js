"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[67e3],{15680:(e,a,t)=>{t.d(a,{xA:()=>p,yg:()=>m});var n=t(96540);function l(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function i(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function r(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?i(Object(t),!0).forEach((function(a){l(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,l=function(e,a){if(null==e)return{};var t,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(l[t]=e[t]);return l}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var d=n.createContext({}),s=function(e){var a=n.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):r(r({},a),e)),t},p=function(e){var a=s(e.components);return n.createElement(d.Provider,{value:a},e.children)},u="mdxType",g={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},y=n.forwardRef((function(e,a){var t=e.components,l=e.mdxType,i=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=s(t),y=l,m=u["".concat(d,".").concat(y)]||u[y]||g[y]||i;return t?n.createElement(m,r(r({ref:a},p),{},{components:t})):n.createElement(m,r({ref:a},p))}));function m(e,a){var t=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var i=t.length,r=new Array(i);r[0]=y;var o={};for(var d in a)hasOwnProperty.call(a,d)&&(o[d]=a[d]);o.originalType=e,o[u]="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=t[s];return n.createElement.apply(null,r)}return n.createElement.apply(null,t)}y.displayName="MDXCreateElement"},16334:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>d,contentTitle:()=>r,default:()=>g,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var n=t(58168),l=(t(96540),t(15680));const i={id:"playground-fields",title:"Adding customizable fields",sidebar_label:"Playground Fields",description:"How to add custom fields to a playable for further tweaking via Creative Suite",keywords:["playable","playground","luna","javascript","external","externally","setup","step","by","step-by-step","guide","how","to"]},r=void 0,o={unversionedId:"playable/javascript-playables/playground-fields",id:"playable/javascript-playables/playground-fields",title:"Adding customizable fields",description:"How to add custom fields to a playable for further tweaking via Creative Suite",source:"@site/docs/playable/javascript-playables/playground-fields.md",sourceDirName:"playable/javascript-playables",slug:"/playable/javascript-playables/playground-fields",permalink:"/docs/playable/javascript-playables/playground-fields",draft:!1,tags:[],version:"current",frontMatter:{id:"playground-fields",title:"Adding customizable fields",sidebar_label:"Playground Fields",description:"How to add custom fields to a playable for further tweaking via Creative Suite",keywords:["playable","playground","luna","javascript","external","externally","setup","step","by","step-by-step","guide","how","to"]},sidebar:"gettingStarted",previous:{title:"Setup via Luna JS SDK",permalink:"/docs/playable/javascript-playables/js-sdk"},next:{title:"Playground Assets",permalink:"/docs/playable/javascript-playables/playground-assets"}},d={},s=[{value:"Adding Creative Suite fields to a playable",id:"adding-creative-suite-fields-to-a-playable",level:2},{value:"1. Open playground.json configuration file and locate <code>&quot;fields&quot;</code> key.",id:"1-open-playgroundjson-configuration-file-and-locate-fields-key",level:3},{value:"2. Add as many fields as you like.",id:"2-add-as-many-fields-as-you-like",level:3},{value:"Constraints",id:"constraints",level:3},{value:"3. Add JavaScript code to use the values from your playable",id:"3-add-javascript-code-to-use-the-values-from-your-playable",level:3},{value:"Ready-to-use example",id:"ready-to-use-example",level:2},{value:"Localize your fields",id:"localize-your-fields",level:2},{value:"Adding hints to a field in Creative Suite",id:"adding-hints-to-a-field-in-creative-suite",level:2}],p={toc:s},u="wrapper";function g(e){let{components:a,...i}=e;return(0,l.yg)(u,(0,n.A)({},p,i,{components:a,mdxType:"MDXLayout"}),(0,l.yg)("p",null,"Creative Suite supports in-browser customisation of playables. This is achieved by the use of Creative Suite Fields. Creative Suite Fields are values that are exposed in Creative Suite Editor as separate controls that allow developers to change some variables without rebuilding the playable."),(0,l.yg)("div",{className:"callout info"},"Please note that these steps are also detailed on our ",(0,l.yg)("a",{href:"https://github.com/LunaCommunity/Playable-Examples"},"community github")," alongside 2 example folders containing ready-to-upload playables."),(0,l.yg)("h2",{id:"adding-creative-suite-fields-to-a-playable"},"Adding Creative Suite fields to a playable"),(0,l.yg)("h3",{id:"1-open-playgroundjson-configuration-file-and-locate-fields-key"},"1. Open playground.json configuration file and locate ",(0,l.yg)("inlineCode",{parentName:"h3"},'"fields"')," key."),(0,l.yg)("h3",{id:"2-add-as-many-fields-as-you-like"},"2. Add as many fields as you like."),(0,l.yg)("p",null,"Each field is defined as a simple JSON object residing under specific ",(0,l.yg)("inlineCode",{parentName:"p"},"class name")," and ",(0,l.yg)("inlineCode",{parentName:"p"},"field name"),". Let's take this by example: consider the below ",(0,l.yg)("inlineCode",{parentName:"p"},"playground.json"),":"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "Basic Playable",\n  "icon": "", // Icon next to the playable in Creative Suite, takes a Data URL.\n\n  "fields": {\n    "MyClass": {\n      "MyField": {\n        "title": "Field Title",\n        "type": "string",\n        "defaultValue": "hello, there!",\n        "section": "",\n        "order": 0,\n        "localization": 0,\n        "options": {}\n      }\n    }\n  }\n}\n')),(0,l.yg)("p",null,"The name of the class (",(0,l.yg)("inlineCode",{parentName:"p"},"MyClass")," in the above example) and the field (",(0,l.yg)("inlineCode",{parentName:"p"},"MyField")," above) are arbitrary - feel free to use whatever makes sense in your setup. Multiple fields can share the same class name, but the pair class name + field name should be unique. Please keep in mind, however, that updating the playable (uploading a new archive in the place of the previously uploaded one) will take those in consideration trying to match the fields based on the combination of class and field name. For instance, if you keep names the same and do not change field type, it will be retained in all versions keeping the values previously set through the Creative Suite."),(0,l.yg)("p",null,"Let us summarize all available field types:"),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"type"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Additional notes"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"string"),(0,l.yg)("td",{parentName:"tr",align:null},"A string value, can be multi-line"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," should be a string, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},'"not set"'))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"int32"),(0,l.yg)("td",{parentName:"tr",align:null},"An int32 value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," should be an int32, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},"100"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"float"),(0,l.yg)("td",{parentName:"tr",align:null},"A floating-point value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," can be any number, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},"100.12"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"bool"),(0,l.yg)("td",{parentName:"tr",align:null},"A boolean value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," can be ",(0,l.yg)("inlineCode",{parentName:"td"},"0")," or ",(0,l.yg)("inlineCode",{parentName:"td"},"1"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"enum"),(0,l.yg)("td",{parentName:"tr",align:null},"An integer value with preset list of options"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"options"')," key is expected to contain allowed entries, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},'{ "0": "Level 0", "1": "Level 1" }'))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"color"),(0,l.yg)("td",{parentName:"tr",align:null},"An RGBA color value"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," should be an array of 4 values of RGBA components, in 0..1 range, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},"[ 1, 0, 0, 1 ]"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"vector2"),(0,l.yg)("td",{parentName:"tr",align:null},"A 2 component vector"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," should be an array of 2 values, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},"[ 100, 200 ]"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"vector3"),(0,l.yg)("td",{parentName:"tr",align:null},"A 3 component vector"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," should be an array of 3 values, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},"[ 100, 200, 300 ]"))),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"vector4"),(0,l.yg)("td",{parentName:"tr",align:null},"A 4 component vector"),(0,l.yg)("td",{parentName:"tr",align:null},(0,l.yg)("inlineCode",{parentName:"td"},'"defaultValue"')," should be an array of 4 values, i.e. ",(0,l.yg)("inlineCode",{parentName:"td"},"[ 100, 200, 300, 400 ]"))))),(0,l.yg)("h3",{id:"constraints"},"Constraints"),(0,l.yg)("p",null,"You can add a constraints object to a field to set limits for its values, this will stop values entered in Creative Suite going under/over the set min/max."),(0,l.yg)("p",null,"An example of adding a constraints object to a field can be seen below."),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},(0,l.yg)("em",{parentName:"strong"},"Setting int/float constraints"))),(0,l.yg)("p",null,"If you make use of both the ",(0,l.yg)("inlineCode",{parentName:"p"},"value_min")," & ",(0,l.yg)("inlineCode",{parentName:"p"},"value_max")," constraints, your field will appear as a range slider in Creative Suite."),(0,l.yg)("p",null,(0,l.yg)("inlineCode",{parentName:"p"},"value_step")," can also be added in order to control at what value the slider increments at, though it is not required in order for a slider to function.\nBy default sliders in Creative Suite will increment by 1 if the slider is affecting an int value, and for float values the default is the difference between the minimum and maximum slider values divided by 100 ",(0,l.yg)("inlineCode",{parentName:"p"},"(max - min)/100"),"."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"name"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Additional notes"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"value_min"),(0,l.yg)("td",{parentName:"tr",align:null},"int32/float value"),(0,l.yg)("td",{parentName:"tr",align:null},"Set a minimum value for an int or float field")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"value_max"),(0,l.yg)("td",{parentName:"tr",align:null},"int32/float value"),(0,l.yg)("td",{parentName:"tr",align:null},"Set a maximum value for an int or float field")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"value_step"),(0,l.yg)("td",{parentName:"tr",align:null},"int32/float value"),(0,l.yg)("td",{parentName:"tr",align:null},"Set the increment value for an int or float field")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},(0,l.yg)("em",{parentName:"strong"},"Example"))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'"mySlider":{\n    "title": "mySlider",\n    "type": "int32",\n    "defaultValue": 10,\n    "constraints": {\n         "value_min":1,\n         "value_max":15,\n         "value_step":1\n    }\n}\n')),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},(0,l.yg)("em",{parentName:"strong"},"Setting array constraints"))),(0,l.yg)("p",null,"If you have an array of Vectors or Colors, you can set the minimum and/or maximum length of said array using the constraints below. Arrays can function in Creative Suite without min or max lengths set, however they will not have limits on the amount of items allowed to be entered into them."),(0,l.yg)("table",null,(0,l.yg)("thead",{parentName:"table"},(0,l.yg)("tr",{parentName:"thead"},(0,l.yg)("th",{parentName:"tr",align:null},"name"),(0,l.yg)("th",{parentName:"tr",align:null},"Description"),(0,l.yg)("th",{parentName:"tr",align:null},"Additional notes"))),(0,l.yg)("tbody",{parentName:"table"},(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"array_min_length"),(0,l.yg)("td",{parentName:"tr",align:null},"int32/float value"),(0,l.yg)("td",{parentName:"tr",align:null},"Set a minimum value for an int or float field")),(0,l.yg)("tr",{parentName:"tbody"},(0,l.yg)("td",{parentName:"tr",align:null},"array_max_length"),(0,l.yg)("td",{parentName:"tr",align:null},"int32/float value"),(0,l.yg)("td",{parentName:"tr",align:null},"Set a maximum value for an int or float field")))),(0,l.yg)("p",null,(0,l.yg)("strong",{parentName:"p"},(0,l.yg)("em",{parentName:"strong"},"Example"))),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},'"myVec3Array":{\n    "title": "myVec3Array",\n    "type": "vector3[]",\n    "defaultValue": [\n        [2,4,6], [1,3,5]\n    ],\n    "constraints": {\n        "array_min_length":0,\n        "array_max_length":3\n    }\n}\n')),(0,l.yg)("h3",{id:"3-add-javascript-code-to-use-the-values-from-your-playable"},"3. Add JavaScript code to use the values from your playable"),(0,l.yg)("p",null,"In order to grab the value of the Creative Suite Field, please use ",(0,l.yg)("inlineCode",{parentName:"p"},"Luna.Unity.Playground.get"),". Since you might want to test your playable locally, don't forget to check for Luna API presence before calling the API, i.e."),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-js"},"function startGame() {\n  // initialize your game as normal\n  // ...\n\n  // check if Luna is defined meaning Creative Suite API is available\n  if ('Luna' in window) {\n    const myValue = Luna.Unity.Playground.get(\n      'MyClass',\n      'MyField',\n      'fallback value'\n    );\n    // do something with myValue\n    // ...\n  }\n\n  // continue to initialize your game as normal :)\n  // ...\n}\n")),(0,l.yg)("p",null,"The ",(0,l.yg)("inlineCode",{parentName:"p"},"Luna.Unity.Playground.get")," will return a value of corresponding type: if the Creative Suite Field is defined to be a string, a string will be returned; if it's vector, an array will be returned and so on. Color fields allow you to pass an additional, 4th argument to ",(0,l.yg)("inlineCode",{parentName:"p"},"Luna.Unity.Playground.get")," with the value set to ",(0,l.yg)("inlineCode",{parentName:"p"},"rgba")," which will make it return a CSS-compatible string corresponding to the color, i.e. ",(0,l.yg)("inlineCode",{parentName:"p"},"#ff00ffff"),"."),(0,l.yg)("h2",{id:"ready-to-use-example"},"Ready-to-use example"),(0,l.yg)("p",null,"Feel free to check the example residing at ",(0,l.yg)("a",{parentName:"p",href:"https://github.com/LunaCommunity/Playable-Examples/tree/master/full"},"https://github.com/LunaCommunity/Playable-Examples/tree/master/full")," for a minimal setup of a playable using Playground Fields."),(0,l.yg)("h2",{id:"localize-your-fields"},"Localize your fields"),(0,l.yg)("p",null,"Creative Suite fields can be localised by adding a new property to the ",(0,l.yg)("inlineCode",{parentName:"p"},"playground.json")," file. This feature aims to help users increment the level of communication within teams."),(0,l.yg)("p",null,"Here is a step-by-step process that will help you implement localisation for your Playground Fields:"),(0,l.yg)("ol",null,(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("strong",{parentName:"p"},"Extract zipped files")," - Open the zip file called ",(0,l.yg)("em",{parentName:"p"},"playground.zip"),", then extract its content.")),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("strong",{parentName:"p"},"Modify the playground.json file")," - The ",(0,l.yg)("inlineCode",{parentName:"p"},"playground.json")," file can be found between the extracted files. In order to localize your Creative Suite Fields you will need to add the ",(0,l.yg)("inlineCode",{parentName:"p"},"localized_field_title")," property to the field object. This will be an object too with a list of all possible translation the field can have. The example below shows a language code (",(0,l.yg)("inlineCode",{parentName:"p"},"ru-RU"),") followed by the translation for that Creative Suite field in Russian."),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-json"},'"fields": {\n        "Settings": {\n            "ButtonTitle": {\n                "title": "Button Title",\n                "type": "string",\n                "defaultValue": "hello, there!",\n                // The property below is responsible for the field localization\n                "localized_field_title": {\n                    "ru-RU": "\u0422\u0435\u043a\u0441\u0442 \u043a\u043d\u043e\u043f\u043a\u0438",\n                }\n            }\n        }\n    }\n')),(0,l.yg)("p",{parentName:"li"},"You can also add multiple translation properties:"),(0,l.yg)("pre",{parentName:"li"},(0,l.yg)("code",{parentName:"pre",className:"language-json"},'"localized_field_title": {\n                    "ru-RU": "\u0422\u0435\u043a\u0441\u0442 \u043a\u043d\u043e\u043f\u043a\u0438",\n                    "zh-CN": "\u6309\u94ae\u6587\u672c",\n                    "ja-JP": "\u30dc\u30bf\u30f3\u30c6\u30ad\u30b9\u30c8",\n                    "it-IT": "Testo del pulsante"\n                    // and more!\n                }\n'))),(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("p",{parentName:"li"},(0,l.yg)("strong",{parentName:"p"},"Zip the files again")," - Once you added your translations for your Luna fields, save the JSON file and zip all of the folder content again."))),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"images-large",src:t(99929).A,width:"698",height:"454"})),(0,l.yg)("ol",{start:4},(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("strong",{parentName:"li"},"Upload the zip file to Creative Suite")," - Open ",(0,l.yg)("a",{parentName:"li",href:"https://playground.lunalabs.io/applications"},"Creative Suite"),", then select or create an app for your build. Press on ",(0,l.yg)("inlineCode",{parentName:"li"},"+ Concept")," and drag & drop the new zip file into the pop up window.")),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"images-large",src:t(72259).A,width:"1000",height:"602"})),(0,l.yg)("ol",{start:5},(0,l.yg)("li",{parentName:"ol"},(0,l.yg)("strong",{parentName:"li"},"Add language parameter to your Creative Suite URL")," - Finally - after Creative Suite completed the uploading of your build - open the creative and add ",(0,l.yg)("inlineCode",{parentName:"li"},"?lng=")," in your address bar, at the end of the existing URL. Your fields will translate according to what parameter you are passing through the query. In the example below we used ",(0,l.yg)("inlineCode",{parentName:"li"},"ru-RU")," for Russian.")),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"images-large",src:t(329).A,width:"720",height:"380"})),(0,l.yg)("h2",{id:"adding-hints-to-a-field-in-creative-suite"},"Adding hints to a field in Creative Suite"),(0,l.yg)("p",null,"In the ",(0,l.yg)("inlineCode",{parentName:"p"},"playground.json")," file you can add another attribute to your playable fields: ",(0,l.yg)("inlineCode",{parentName:"p"},"localized_field_hint"),". By using this attribute, you can indicate what the field is used for, as well as add different translations to the hint."),(0,l.yg)("p",null,"Here is an example of how to add this field to your ",(0,l.yg)("inlineCode",{parentName:"p"},"playground.json")," file:"),(0,l.yg)("pre",null,(0,l.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "title": "....",\n\n  "fields": {\n    "Settings": {\n      "ButtonTitle": {\n        "title": "Button Title",\n        "type": "string",\n        "defaultValue": "hello, there!",\n        "localized_field_hint": {\n          "ru-RU": "\u042d\u0442\u043e\u0442 \u0442\u0435\u043a\u0441\u0442 \u0431\u0443\u0434\u0435\u0442 \u0432\u0438\u0434\u0435\u043d \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0435",\n          "en-US": "This text will be visible on CTA button"\n        }\n      }\n    }\n  }\n}\n')),(0,l.yg)("p",null,"In Creative Suite, a tooltip will appear next to the field that contains the hint."),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"images-small",src:t(35482).A,width:"576",height:"192"})),(0,l.yg)("p",null,"To achieve this, compress your build files with the updated ",(0,l.yg)("inlineCode",{parentName:"p"},"playground.json")," and upload the build into ",(0,l.yg)("a",{parentName:"p",href:"https://playground.lunalabs.io/"},"Creative Suite"),"."),(0,l.yg)("p",null,"By using the ",(0,l.yg)("inlineCode",{parentName:"p"},"?lng=")," parameter in your address bar, it is possible to switch between the different localisations added to the hint attribute. This is exaplained in more details ",(0,l.yg)("a",{parentName:"p",href:"#localize-your-playground-fields"},"above"),"."))}g.isMDXComponent=!0},329:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/localise-fields-argument-b2bad10fd96b3413c707c87807e0bbfa.gif"},72259:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/localise-fields-upload-587880aa830d08c10737a567f981b80b.gif"},99929:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/localise-fields-zip-49e6cfad81ad94dd882b86fe40d588f7.gif"},35482:(e,a,t)=>{t.d(a,{A:()=>n});const n=t.p+"assets/images/pg-field-hint-983d4cb1567f3f109d5a989423946240.png"}}]);