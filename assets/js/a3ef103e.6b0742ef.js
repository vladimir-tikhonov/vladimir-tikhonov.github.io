"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[82909],{15680:(e,t,n)=>{n.d(t,{xA:()=>u,yg:()=>y});var r=n(96540);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),c=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),f=o,y=p["".concat(i,".").concat(f)]||p[f]||d[f]||a;return n?r.createElement(y,s(s({ref:t},u),{},{components:n})):r.createElement(y,s({ref:t},u))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l[p]="string"==typeof e?e:o,s[1]=l;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},88339:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=n(58168),o=(n(96540),n(15680));const a={id:"cannot-use-playgroundassetfield",title:"Cannot use PlaygroundAssetField and a Font to replace TMP fonts.",sidebar_label:"Cannot use PlaygroundAssetField and a Font to replace TMP fonts."},s=void 0,l={unversionedId:"playable/common-issues/font/cannot-use-playgroundassetfield",id:"playable/common-issues/font/cannot-use-playgroundassetfield",title:"Cannot use PlaygroundAssetField and a Font to replace TMP fonts.",description:"This could be to the fact that creating TMP font assets is done in the editor, through the TMP package for Unity (not during runtime). This means we cannot generate new fonts during the runtime of the playable and dynamically replace them for TextMeshPro.",source:"@site/docs/playable/common-issues/font/cannot-use-playgroundassetfield.md",sourceDirName:"playable/common-issues/font",slug:"/playable/common-issues/font/cannot-use-playgroundassetfield",permalink:"/docs/playable/common-issues/font/cannot-use-playgroundassetfield",draft:!1,tags:[],version:"current",frontMatter:{id:"cannot-use-playgroundassetfield",title:"Cannot use PlaygroundAssetField and a Font to replace TMP fonts.",sidebar_label:"Cannot use PlaygroundAssetField and a Font to replace TMP fonts."},sidebar:"gettingStarted",previous:{title:"TextMesh Pro errors shown in Chrome devtools",permalink:"/docs/playable/common-issues/font/textmesh-pro-errors"},next:{title:"Failed to combine glyphs to png error notification in Unity",permalink:"/docs/playable/common-issues/font/failed-to-combine"}},i={},c=[],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.yg)(p,(0,r.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"This could be to the fact that creating TMP font assets is done in the editor, through the TMP package for Unity (not during runtime). This means we cannot generate new fonts during the runtime of the playable and dynamically replace them for TextMeshPro."),(0,o.yg)("p",null,"Possible solutions:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},"Include the font in the playable so it\u2019s exported along with it."),(0,o.yg)("li",{parentName:"ul"},"Use the regular UI Text which supports font replacement via Creative Suite.")))}d.isMDXComponent=!0}}]);