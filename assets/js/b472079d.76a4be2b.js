"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[45154],{15680:(e,t,r)=>{r.d(t,{xA:()=>c,yg:()=>f});var o=r(96540);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=o.createContext({}),p=function(e){var t=o.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),y=n,f=d["".concat(s,".").concat(y)]||d[y]||u[y]||a;return r?o.createElement(f,i(i({ref:t},c),{},{components:r})):o.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=y;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,i[1]=l;for(var p=2;p<a;p++)i[p]=r[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}y.displayName="MDXCreateElement"},18414:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=r(58168),n=(r(96540),r(15680));const a={id:"LP1002",title:"Repeat wrap mode used",sidebar_label:"1002 - Non Pot Texture",description:"Explanation & steps to fix.",keywords:["non-repeat","repeat","wrap","mode","used","fix","playable","luna","error","LP1002"]},i=void 0,l={unversionedId:"playable/code/error-codes/LP1002",id:"playable/code/error-codes/LP1002",title:"Repeat wrap mode used",description:"Explanation & steps to fix.",source:"@site/docs/playable/code/error-codes/1002-NonPotTexture.md",sourceDirName:"playable/code/error-codes",slug:"/playable/code/error-codes/LP1002",permalink:"/docs/playable/code/error-codes/LP1002",draft:!1,tags:[],version:"current",sidebarPosition:1002,frontMatter:{id:"LP1002",title:"Repeat wrap mode used",sidebar_label:"1002 - Non Pot Texture",description:"Explanation & steps to fix.",keywords:["non-repeat","repeat","wrap","mode","used","fix","playable","luna","error","LP1002"]},sidebar:"gettingStarted",previous:{title:"1001 - Shader Stripping",permalink:"/docs/playable/code/error-codes/LP1001"},next:{title:"1003 - Deferred Rendering",permalink:"/docs/playable/code/error-codes/LP1003"}},s={},p=[{value:"Message",id:"message",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Steps to fix",id:"steps-to-fix",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.yg)(d,(0,o.A)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,n.yg)("h2",{id:"message"},"Message"),(0,n.yg)("p",null,"Repeat wrap mode used on a texture with non power-of-two dimensions, may cause it to be rendered incorrectly."),(0,n.yg)("h2",{id:"explanation"},"Explanation"),(0,n.yg)("p",null,"Playable Plugin targets WebGL 1 API, which is roughly equivalent to OpenGL ES 2.0. This family of graphics API doesn't support the sampling textures with addressing mode ",(0,n.yg)("inlineCode",{parentName:"p"},"Repeat"),", if the texture's dimensions are not power-of-two."),(0,n.yg)("h2",{id:"steps-to-fix"},"Steps to fix"),(0,n.yg)("p",null,"There are two options of how this warning can be eliminated:"),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Use Unity's \"Non Power of 2\" option to automatically resize the texture to become a PoT texture (Luna does respect this setting as well). This option can be found in texture's import settings:")),(0,n.yg)("p",null,(0,n.yg)("img",{alt:"images-medium",src:r(70054).A,width:"819",height:"410"})),(0,n.yg)("ul",null,(0,n.yg)("li",{parentName:"ul"},"Resize the original file in any graphics editor (Photoshop, Sketch etc) to make sure both width and height are power of two (2, 4, 8, 16 ...)")))}u.isMDXComponent=!0},70054:(e,t,r)=>{r.d(t,{A:()=>o});const o=r.p+"assets/images/troubleshooting-luna-ui-luna-expert-non-pot-texture-5c7dc5ea315fb69c9e5e6eb1ad66518b.png"}}]);