"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[63100],{15680:(e,t,a)=>{a.d(t,{xA:()=>m,yg:()=>y});var n=a(96540);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},m=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(a),d=i,y=p["".concat(l,".").concat(d)]||p[d]||u[d]||r;return a?n.createElement(y,o(o({ref:t},m),{},{components:a})):n.createElement(y,o({ref:t},m))}));function y(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:i,o[1]=s;for(var c=2;c<r;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},93929:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var n=a(58168),i=(a(96540),a(15680));const r={id:"optimising-particles",title:"Optimising Particles",sidebar_label:"Particles",description:"Tips on how to lessen the performance strain particles can cause in your playables.",keywords:["particles","optimise","reduce","size","playable","luna"]},o=void 0,s={unversionedId:"playable/optimise-your-builds/optimising-assets/optimising-particles",id:"playable/optimise-your-builds/optimising-assets/optimising-particles",title:"Optimising Particles",description:"Tips on how to lessen the performance strain particles can cause in your playables.",source:"@site/docs/playable/optimise-your-builds/optimising-assets/optimising-particles.md",sourceDirName:"playable/optimise-your-builds/optimising-assets",slug:"/playable/optimise-your-builds/optimising-assets/optimising-particles",permalink:"/docs/playable/optimise-your-builds/optimising-assets/optimising-particles",draft:!1,tags:[],version:"current",frontMatter:{id:"optimising-particles",title:"Optimising Particles",sidebar_label:"Particles",description:"Tips on how to lessen the performance strain particles can cause in your playables.",keywords:["particles","optimise","reduce","size","playable","luna"]},sidebar:"gettingStarted",previous:{title:"Meshes",permalink:"/docs/playable/optimise-your-builds/optimising-assets/optimising-meshes"},next:{title:"Shaders",permalink:"/docs/playable/optimise-your-builds/optimising-assets/optimising-shaders"}},l={},c=[{value:"Baking Particles",id:"baking-particles",level:2},{value:"Baking your Particle System(s)",id:"baking-your-particle-systems",level:3},{value:"Converting to an animation",id:"converting-to-an-animation",level:3},{value:"Pros and cons",id:"pros-and-cons",level:3},{value:"Solving the file size increase",id:"solving-the-file-size-increase",level:3},{value:"Reducing Particle Complexity",id:"reducing-particle-complexity",level:2},{value:"Removing Small Particle Details",id:"removing-small-particle-details",level:2}],m={toc:c},p="wrapper";function u(e){let{components:t,...r}=e;return(0,i.yg)(p,(0,n.A)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"Particles can often end up being quite resource-intensive within the context of a playable. Within this page we aim to provide tips, techniques and resources to lessen the strain on performance particles can end up creating."),(0,i.yg)("h2",{id:"baking-particles"},"Baking Particles"),(0,i.yg)("p",null,"Let's start with the method that causes the least loss in quality, baking your particles into a series of pngs that can be used to create an animation."),(0,i.yg)("p",null,"There are a few factors to consider when deciding whether or not to go with this approach:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"Are the effects using regular shapes and quite small in size (width/height)?"),(0,i.yg)("li",{parentName:"ul"},"Are the effects not making use of physics? i.e. Are the particles not interacting with one another?"),(0,i.yg)("li",{parentName:"ul"},"Does the particle effect look similar between multiple simulations?")),(0,i.yg)("p",null,"If the answer is yes to these questions this is likely the best approach for you. If not we have other methods ",(0,i.yg)("a",{parentName:"p",href:"#reducing-particle-complexity"},"towards the end of this page"),"."),(0,i.yg)("p",null,"For this process we will be making use of a public script that takes screenshots of our scene and adds them to a folder at our project's root folder. You can find this script by clicking ",(0,i.yg)("a",{parentName:"p",href:"https://gist.github.com/bitbutter/302da1c840b7c93bc789"},"here"),", or alternatively by copying the code below."),(0,i.yg)("details",null,(0,i.yg)("summary",null,"CLICK HERE FOR SCRIPT"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-cs"},'using UnityEngine;\nusing System.Collections;\nusing System.IO;\n\n/*\nUsage:\n1. Attach this script to your chosen camera\'s game object.\n2. Set that camera\'s Clear Flags field to Solid Color.\n3. Use the inspector to set frameRate and framesToCapture\n4. Choose your desired resolution in Unity\'s Game window (must be less than or equal to your screen resolution)\n5. Turn on "Maximise on Play"\n6. Play your scene. Screenshots will be saved to YourUnityProject/Screenshots by default.\n*/\n\npublic class TransparentBackgroundScreenshotRecorder : MonoBehaviour {\n\n#region public fields\n[Tooltip("A folder will be created with this base name in your project root")]\npublic string folderBaseName = "Screenshots";\n[Tooltip("How many frames should be captured per second of game time")]\npublic int frameRate = 24;\n[Tooltip("How many frames should be captured before quitting")]\npublic int framesToCapture = 24;\n#endregion\n#region private fields\nprivate string folderName = "";\nprivate GameObject whiteCamGameObject;\nprivate Camera whiteCam;\nprivate GameObject blackCamGameObject;\nprivate Camera blackCam;\nprivate Camera mainCam;\nprivate int videoFrame = 0; // how many frames we\'ve rendered\nprivate float originalTimescaleTime;\nprivate bool done=false;\nprivate int screenWidth;\nprivate int screenHeight;\nprivate Texture2D textureBlack;\nprivate Texture2D textureWhite;\nprivate Texture2D textureTransparentBackground;\n#endregion\n\nvoid Awake () {\n  mainCam = gameObject.GetComponent<Camera>();\n  CreateBlackAndWhiteCameras ();\n  CreateNewFolderForScreenshots ();\n  CacheAndInitialiseFields ();\n  Time.captureFramerate = frameRate;\n}\n\nvoid LateUpdate () {\n  if(!done){\n    StartCoroutine(CaptureFrame());\n  } else {\n    Debug.Log("Complete! "+videoFrame+" videoframes rendered. File names are 0 indexed)");\n  Debug.Break();\n  }\n}\n\nIEnumerator CaptureFrame (){\n  yield return new WaitForEndOfFrame();\n  if(videoFrame < framesToCapture) {\n    RenderCamToTexture(blackCam,textureBlack);\n    RenderCamToTexture(whiteCam,textureWhite);\n    CalculateOutputTexture ();\n    SavePng ();\n    videoFrame++;\n    Debug.Log("Rendered frame " +videoFrame);\n    videoFrame++;\n  } else {\n    done=true;\n    StopCoroutine("CaptureFrame");\n  }\n}\n\nvoid RenderCamToTexture (Camera cam, Texture2D tex){\n  cam.enabled=true;\n  cam.Render();\n  WriteScreenImageToTexture(tex);\n  cam.enabled=false;\n}\n\nvoid CreateBlackAndWhiteCameras (){\n  whiteCamGameObject = (GameObject) new GameObject();\n  whiteCamGameObject.name="White Background Camera";\n  whiteCam=whiteCamGameObject.AddComponent<Camera>();\n  whiteCam.CopyFrom(mainCam);\n  whiteCam.backgroundColor=Color.white;\n  whiteCamGameObject.transform.SetParent(gameObject.transform, true);\n\n  blackCamGameObject = (GameObject) new GameObject();\n  blackCamGameObject.name="Black Background Camera";\n  blackCam=blackCamGameObject.AddComponent<Camera>();\n  blackCam.CopyFrom(mainCam);\n  blackCam.backgroundColor=Color.black;\n  blackCamGameObject.transform.SetParent(gameObject.transform, true);\n}\n\nvoid CreateNewFolderForScreenshots (){\n  // Find a folder name that doesn\'t exist yet. Append number if necessary.\n  folderName = folderBaseName;\n  int count = 1;\n  while (System.IO.Directory.Exists (folderName)) {\n    folderName = folderBaseName + count;\n    count++;\n  }\n  System.IO.Directory.CreateDirectory (folderName); // Create the folder\n}\n\nvoid WriteScreenImageToTexture (Texture2D tex){\n  tex.ReadPixels (new Rect (0, 0, screenWidth, screenHeight), 0, 0);\n  tex.Apply ();\n}\n\nvoid CalculateOutputTexture (){\n  Color color;\n  for (int y = 0; y < textureTransparentBackground.height; ++y) {\n  // each row\n    for (int x = 0; x < textureTransparentBackground.width; ++x) {\n      // each column\n      float alpha = textureWhite.GetPixel (x, y).r - textureBlack.GetPixel (x, y).r;\n      alpha = 1.0f - alpha;\n      if (alpha == 0) {\n        color = Color.clear;\n      }\n      else {\n        color = textureBlack.GetPixel (x, y) / alpha;\n      }\n      color.a = alpha;\n      textureTransparentBackground.SetPixel (x, y, color);\n    }\n  }\n}\n\nvoid SavePng (){\n  string name = string.Format ("{0}/{1:D04} shot.png", folderName, videoFrame);\n  var pngShot = textureTransparentBackground.EncodeToPNG ();\n  File.WriteAllBytes (name, pngShot);\n}\n\nvoid CacheAndInitialiseFields (){\n  originalTimescaleTime = Time.timeScale;\n  screenWidth = Screen.width;\n  screenHeight = Screen.height;\n  textureBlack = new Texture2D (screenWidth, screenHeight, TextureFormat.RGB24, false);\n  textureWhite = new Texture2D (screenWidth, screenHeight, TextureFormat.RGB24, false);\n  textureTransparentBackground = new Texture2D (screenWidth, screenHeight, TextureFormat.ARGB32, false);\n  }\n}\n'))),(0,i.yg)("p",null,"Once you have imported this script into your Unity project we are ready to begin."),(0,i.yg)("admonition",{title:"NOTE",type:"note"},(0,i.yg)("p",{parentName:"admonition"},"This script is likely to cause compilation issues when building for Luna, once you have finished baking your particles be sure to either exclude it from the build or remove it from your project folder.")),(0,i.yg)("h3",{id:"baking-your-particle-systems"},"Baking your Particle System(s)"),(0,i.yg)("p",null,"One thing to note before we begin, you can layer multiple particle systems within the same scene to create one animation containing all of them."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Create a fresh Unity scene containing a camera, and the particle system(s) you wish to bake."),(0,i.yg)("li",{parentName:"ol"},"Add the TransparentBackgroundScreenshotRecorder script onto the scene's camera, and set the camera's Clear Flags field to Solid Color."),(0,i.yg)("li",{parentName:"ol"},"Within the inspector you can set your desired frameRate and total number of frames to screenshot.")),(0,i.yg)("admonition",{type:"tip"},(0,i.yg)("p",{parentName:"admonition"},"The higher the values set here will increase the screenshots and thusly the space taken up by the animation. 24 FPS is a good target, as playables usually average 30 FPS, but keep in mind how long your particle takes to finish when deciding for yourself.")),(0,i.yg)("ol",{start:4},(0,i.yg)("li",{parentName:"ol"},"Position your particle system(s) so that they will be rendered by the camera, and set a resolution for your camera that fits."),(0,i.yg)("li",{parentName:"ol"},'Turn on "Maximise on Play" within the game window in Unity. 6. Play your scene, screenshots will be saved to YourUnityProject/Screenshots by default.')),(0,i.yg)("admonition",{type:"caution"},(0,i.yg)("p",{parentName:"admonition"},"If you plan to work within the same scene going forward, be sure to disable or remove the script from the camera otherwise the capture process will begin again next time you hit play!")),(0,i.yg)("h3",{id:"converting-to-an-animation"},"Converting to an animation"),(0,i.yg)("p",null,"Before starting this process, be sure to check the screenshots taken to see if they are to your liking. If not you can always delete the folder, go back to the previous process, tweak the FPS / Frames to Capture / Resolution and try again."),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},"Import the screenshots taken into your Unity project folder."),(0,i.yg)("li",{parentName:"ol"},"Convert these images into Sprites via the Import Settings."),(0,i.yg)("li",{parentName:"ol"},"Select all the sprites you wish to include in the animation, and drag them into the scene all at once."),(0,i.yg)("li",{parentName:"ol"},"An animation will be generated and you will be asked to assign a name.")),(0,i.yg)("p",null,"And done! You have successfully converted your particle system into an animation! You can now go about replacing the existing particle system in your playable scene with this animation, as well as make any tweaks you'd like to the animation itself."),(0,i.yg)("h3",{id:"pros-and-cons"},"Pros and cons"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Pros"),(0,i.yg)("th",{parentName:"tr",align:null},"Cons"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"Faster performance."),(0,i.yg)("td",{parentName:"tr",align:null},"Typically larger file-size and thus more memory usage.")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},"The original particles can be high quality, and still end up looking the same in Luna as it did in Unity."),(0,i.yg)("td",{parentName:"tr",align:null},"The baked animation is always the same, to get variety you would need to have a couple of different renders.")))),(0,i.yg)("h3",{id:"solving-the-file-size-increase"},"Solving the file size increase"),(0,i.yg)("p",null,"With the increased file size we need to make sure we also optimise these new assets."),(0,i.yg)("p",null,"The quick fix is to use the PNG format. We can start with these settings as we can still optimise the PNG size by up-to 50% while keeping the quality of the images:"),(0,i.yg)("p",null,(0,i.yg)("img",{alt:"images-medium",src:a(42074).A,width:"659",height:"445"})," ",(0,i.yg)("br",null)),(0,i.yg)("h2",{id:"reducing-particle-complexity"},"Reducing Particle Complexity"),(0,i.yg)("p",null,"Some particle systems may contain effects that wouldn't work if baked due to how they function, like a trailing smoke effect."),(0,i.yg)("p",null,"In these cases it may instead be better to reduce the complexity of the effects that cannot be baked, whilst baking the parts of the particle that can be."),(0,i.yg)("p",null,"To reduce particle complexity you can cut the amount of emitted particles by however much you deem to be visually viable."),(0,i.yg)("h2",{id:"removing-small-particle-details"},"Removing Small Particle Details"),(0,i.yg)("p",null,"If your particle systems contain small details, like slight changes to color and size over time, it may be an idea to cut these features from the particle system entirely."),(0,i.yg)("p",null,"Many users will likely not notice small details during their 15-20 seconds of playtime, but they can however affect performance, which is something a player is much more likely to notice."))}u.isMDXComponent=!0},42074:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/particles-compression-a08cf76dc58dbc020628b9218ccd3106.png"}}]);