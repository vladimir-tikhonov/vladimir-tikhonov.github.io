"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[87500],{15680:(e,t,n)=>{n.d(t,{xA:()=>c,yg:()=>f});var o=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),u=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},y=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),p=u(n),y=r,f=p["".concat(s,".").concat(y)]||p[y]||d[y]||a;return n?o.createElement(f,l(l({ref:t},c),{},{components:n})):o.createElement(f,l({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=y;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[p]="string"==typeof e?e:r,l[1]=i;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}y.displayName="MDXCreateElement"},25060:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>u});var o=n(58168),r=(n(96540),n(15680));const a={id:"default-ui-text",title:"Default UI Text Component Font Stylings set in Unity such as Bold Italic BoldItalic are not applied in Luna",sidebar_label:"Default UI Text Component Font Stylings set in Unity such as Bold Italic BoldItalic are not applied in Luna"},l=void 0,i={unversionedId:"playable/common-issues/font/default-ui-text",id:"playable/common-issues/font/default-ui-text",title:"Default UI Text Component Font Stylings set in Unity such as Bold Italic BoldItalic are not applied in Luna",description:"We currently only export one variant of a font as a texture. To include stylings would require exporting multiple Font Atlas Textures, one for each Font and Font Styling, which would bloat playable size extremely quickly. However TextMeshPro would keep its styling in Luna, due to it being done with an SDF algorithm (which allows it to be done via Shaders).",source:"@site/docs/playable/common-issues/font/default-ui-text.md",sourceDirName:"playable/common-issues/font",slug:"/playable/common-issues/font/default-ui-text",permalink:"/docs/playable/common-issues/font/default-ui-text",draft:!1,tags:[],version:"current",frontMatter:{id:"default-ui-text",title:"Default UI Text Component Font Stylings set in Unity such as Bold Italic BoldItalic are not applied in Luna",sidebar_label:"Default UI Text Component Font Stylings set in Unity such as Bold Italic BoldItalic are not applied in Luna"},sidebar:"gettingStarted",previous:{title:"TextMeshPro text is misaligned compared to Unity",permalink:"/docs/playable/common-issues/font/textmeshpro-text-is"},next:{title:"Text not rendered correctly in Luna",permalink:"/docs/playable/common-issues/font/text-not-rendered"}},s={},u=[],c={toc:u},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.yg)(p,(0,o.A)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"We currently only export one variant of a font as a texture. To include stylings would require exporting multiple Font Atlas Textures, one for each Font and Font Styling, which would bloat playable size extremely quickly. However TextMeshPro would keep its styling in Luna, due to it being done with an SDF algorithm (which allows it to be done via Shaders)."),(0,r.yg)("p",null,"Possible solutions:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Use TextMeshPro, see ",(0,r.yg)("a",{parentName:"li",href:"/docs/playable/code/unity-plugins/tmp"},"here")," for how to use TMP with Luna."),(0,r.yg)("li",{parentName:"ul"},"Use a font in the style you need such as a bold font."),(0,r.yg)("li",{parentName:"ul"},"If you only need a bold effect, you can create a duplicate but slightly larger text object and put it behind the original text.")))}d.isMDXComponent=!0}}]);