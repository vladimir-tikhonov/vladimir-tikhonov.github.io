"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[80792],{15680:(e,n,r)=>{r.d(n,{xA:()=>c,yg:()=>u});var t=r(96540);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function i(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?i(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},i=Object.keys(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)r=i[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=t.createContext({}),d=function(e){var n=t.useContext(l),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},c=function(e){var n=d(e.components);return t.createElement(l.Provider,{value:n},e.children)},p="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},h=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(r),h=a,u=p["".concat(l,".").concat(h)]||p[h]||f[h]||i;return r?t.createElement(u,s(s({ref:n},c),{},{components:r})):t.createElement(u,s({ref:n},c))}));function u(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=r.length,s=new Array(i);s[0]=h;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o[p]="string"==typeof e?e:a,s[1]=o;for(var d=2;d<i;d++)s[d]=r[d];return t.createElement.apply(null,s)}return t.createElement.apply(null,r)}h.displayName="MDXCreateElement"},14063:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>f,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var t=r(58168),a=(r(96540),r(15680));const i={id:"shaders-look-different",title:"Shaders look different on Android devices only",sidebar_label:"Shaders look different on Android devices only"},s=void 0,o={unversionedId:"playable/common-issues/shaders_meshes/shaders-look-different",id:"playable/common-issues/shaders_meshes/shaders-look-different",title:"Shaders look different on Android devices only",description:"This issue is most likely caused by WebGL precision issues.",source:"@site/docs/playable/common-issues/shaders_meshes/shaders-look-different.md",sourceDirName:"playable/common-issues/shaders_meshes",slug:"/playable/common-issues/shaders_meshes/shaders-look-different",permalink:"/docs/playable/common-issues/shaders_meshes/shaders-look-different",draft:!1,tags:[],version:"current",frontMatter:{id:"shaders-look-different",title:"Shaders look different on Android devices only",sidebar_label:"Shaders look different on Android devices only"},sidebar:"gettingStarted",previous:{title:"Shader Graph material gets rendered as pitch black",permalink:"/docs/playable/common-issues/shaders_meshes/shader-graph-material"},next:{title:"Error HiddenInternalErrorShaderALWAYS\\_ is not found and replaced as missing shader. Particle system using this shader also does not work",permalink:"/docs/playable/common-issues/shaders_meshes/error-hiddeninternalerrorshaderalways-is"}},l={},d=[],c={toc:d},p="wrapper";function f(e){let{components:n,...r}=e;return(0,a.yg)(p,(0,t.A)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.yg)("p",null,"This issue is most likely caused by ",(0,a.yg)("a",{parentName:"p",href:"https://webglfundamentals.org/webgl/lessons/webgl-precision-issues.html"},"WebGL precision issues"),"."),(0,a.yg)("p",null,"The use of functions like ",(0,a.yg)("inlineCode",{parentName:"p"},"normalize"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"length"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"distance"),", ",(0,a.yg)("inlineCode",{parentName:"p"},"dot")," in your shader might return inaccurate results on Android devices if provided parameters are defined as ",(0,a.yg)("em",{parentName:"p"},"half")," or ",(0,a.yg)("em",{parentName:"p"},"fixed"),"."),(0,a.yg)("p",null,"Possible solution:"),(0,a.yg)("ul",null,(0,a.yg)("li",{parentName:"ul"},"The issue can be fixed by using ",(0,a.yg)("inlineCode",{parentName:"li"},"float")," instead.")),(0,a.yg)("details",null," ",(0,a.yg)("summary",null,"EXAMPLE"),(0,a.yg)("p",null,"Here is an example of a pseudo-shader that will behave differently on Android devices with large values of ",(0,a.yg)("inlineCode",{parentName:"p"},"_LightDirection = (400, 200, -200, 1)"),":"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},'Shader "Core/Hyper Lighting"\n{\n  Properties\n  {\n    _LightDirection ("Light Direction", Vector) = (400, 200, -200, 1)\n  }\n\n  SubShader\n  {\n    Tags { "RenderType" = "Opaque" }\n    LOD 200\n\n    //Blend SrcAlpha OneMinusSrcAlpha\n    Pass\n    {\n\n      CGPROGRAM\n\n      // Define name of vertex shader\n      #pragma vertex vert\n      // Define name of fragment shader\n      #pragma fragment frag\n      #include "UnityCG.cginc"\n      half4 _LightDirection;\n\n      // This is the vertex shader\n      v2f vert(appdata v)\n      {\n        ...\n      }\n\n      // This is the fragment shader\n      half3 frag(v2f i) : COLOR\n      {\n        half3 normalized = normalize(half3(_LightDirection.x, _LightDirection.y, _LightDirection.z));\n        return normalized;\n      }\n\n      ENDCG\n    }\n  }\n}\n\n')),(0,a.yg)("p",null,"The following is the fixed version:"),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre"},"float4 _LightDirection;\n\n// This is the vertex shader\nv2f vert(appdata v)\n{\n  ...\n}\n\n// This is the fragment shader\nhalf3 frag(v2f i) : COLOR\n{\n  float3 normalized = normalize(float3(_LightDirection.x, _LightDirection.y, _LightDirection.z));\n  return normalized;\n}\n"))))}f.isMDXComponent=!0}}]);