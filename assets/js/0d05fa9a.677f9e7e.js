"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[69027],{15680:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>y});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),s=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=s(e.components);return r.createElement(u.Provider,{value:n},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=o,y=p["".concat(u,".").concat(d)]||p[d]||m[d]||a;return t?r.createElement(y,i(i({ref:n},c),{},{components:t})):r.createElement(y,i({ref:n},c))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var u in n)hasOwnProperty.call(n,u)&&(l[u]=n[u]);l.originalType=e,l[p]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},55972:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(58168),o=(t(96540),t(15680));const a={id:"animationcurve-evaluate-not-working",title:"AnimationCurve.Evaluate not working",sidebar_label:"AnimationCurve.Evaluate not working"},i=void 0,l={unversionedId:"playable/common-issues/rendering/animationcurve-evaluate-not-working",id:"playable/common-issues/rendering/animationcurve-evaluate-not-working",title:"AnimationCurve.Evaluate not working",description:"This issue is likely due to the AnimationCurve being set to Loop wrap mode, which is currently not supported by the Luna Plugin. Consequently, AnimationCurve.Evaluate() will be a value that always increments. To simulate the loop this value should decrement  too.",source:"@site/docs/playable/common-issues/rendering/animationcurve-evaluate-not-working.md",sourceDirName:"playable/common-issues/rendering",slug:"/playable/common-issues/rendering/animationcurve-evaluate-not-working",permalink:"/docs/playable/common-issues/rendering/animationcurve-evaluate-not-working",draft:!1,tags:[],version:"current",frontMatter:{id:"animationcurve-evaluate-not-working",title:"AnimationCurve.Evaluate not working",sidebar_label:"AnimationCurve.Evaluate not working"},sidebar:"gettingStarted",previous:{title:"Skybox is not rendered when using the Luna shader variants collection",permalink:"/docs/playable/common-issues/rendering/skybox-is-not"},next:{title:"Incorrect render queue",permalink:"/docs/playable/common-issues/rendering/incorrect-render-queue"}},u={},s=[],c={toc:s},p="wrapper";function m(e){let{components:n,...t}=e;return(0,o.yg)(p,(0,r.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"This issue is likely due to the ",(0,o.yg)("inlineCode",{parentName:"p"},"AnimationCurve")," being set to ",(0,o.yg)("inlineCode",{parentName:"p"},"Loop")," wrap mode, which is currently not supported by the Luna Plugin. Consequently, ",(0,o.yg)("inlineCode",{parentName:"p"},"AnimationCurve.Evaluate()")," will be a value that ",(0,o.yg)("strong",{parentName:"p"},"always increments"),". To simulate the loop this value ",(0,o.yg)("strong",{parentName:"p"},"should decrement ")," too."),(0,o.yg)("p",null,"Possible solution:"),(0,o.yg)("ul",null,(0,o.yg)("li",{parentName:"ul"},(0,o.yg)("p",{parentName:"li"},"Set the wrap mode to ",(0,o.yg)("inlineCode",{parentName:"p"},"Default"),", then add the decrement logic for the curve evaluation in your code:"),(0,o.yg)("pre",{parentName:"li"},(0,o.yg)("code",{parentName:"pre",className:"language-cs"},"float val = (Time.deltaTime / 8) * AnimationSpeedReduction;\nShinyLightCurveTime += _increment ? val : val * -1;\n\nif (ShinyLightCurveTime >= 1f)\n{\n_increment = false;\n} else if (ShinyLightCurveTime <= 0f)\n{\n_increment = true;\n}\n")))))}m.isMDXComponent=!0}}]);