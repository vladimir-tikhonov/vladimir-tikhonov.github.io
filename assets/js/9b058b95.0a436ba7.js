"use strict";(self.webpackChunkdeveloper_docs=self.webpackChunkdeveloper_docs||[]).push([[9443],{19365:(e,t,a)=>{a.d(t,{A:()=>r});var n=a(96540),l=a(20053);const i={tabItem:"tabItem_Ymn6"};function r(e){let{children:t,hidden:a,className:r}=e;return n.createElement("div",{role:"tabpanel",className:(0,l.A)(i.tabItem,r),hidden:a},t)}},11470:(e,t,a)=>{a.d(t,{A:()=>M});var n=a(58168),l=a(96540),i=a(20053),r=a(23104),o=a(56347),u=a(57485),s=a(31682),d=a(89466);function m(e){return function(e){var t,a;return null!=(t=null==(a=l.Children.map(e,(e=>{if(!e||(0,l.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})))?void 0:a.filter(Boolean))?t:[]}(e).map((e=>{let{props:{value:t,label:a,attributes:n,default:l}}=e;return{value:t,label:a,attributes:n,default:l}}))}function c(e){const{values:t,children:a}=e;return(0,l.useMemo)((()=>{const e=null!=t?t:m(a);return function(e){const t=(0,s.X)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error('Docusaurus error: Duplicate values "'+t.map((e=>e.value)).join(", ")+'" found in <Tabs>. Every value needs to be unique.')}(e),e}),[t,a])}function y(e){let{value:t,tabValues:a}=e;return a.some((e=>e.value===t))}function p(e){let{queryString:t=!1,groupId:a}=e;const n=(0,o.W6)(),i=function(e){let{queryString:t=!1,groupId:a}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!a)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return null!=a?a:null}({queryString:t,groupId:a});return[(0,u.aZ)(i),(0,l.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function g(e){const{defaultValue:t,queryString:a=!1,groupId:n}=e,i=c(e),[r,o]=(0,l.useState)((()=>function(e){var t;let{defaultValue:a,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(a){if(!y({value:a,tabValues:n}))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+a+'" but none of its children has the corresponding value. Available values are: '+n.map((e=>e.value)).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");return a}const l=null!=(t=n.find((e=>e.default)))?t:n[0];if(!l)throw new Error("Unexpected error: 0 tabValues");return l.value}({defaultValue:t,tabValues:i}))),[u,s]=p({queryString:a,groupId:n}),[m,g]=function(e){let{groupId:t}=e;const a=function(e){return e?"docusaurus.tab."+e:null}(t),[n,i]=(0,d.Dv)(a);return[n,(0,l.useCallback)((e=>{a&&i.set(e)}),[a,i])]}({groupId:n}),h=(()=>{const e=null!=u?u:m;return y({value:e,tabValues:i})?e:null})();(0,l.useLayoutEffect)((()=>{h&&o(h)}),[h]);return{selectedValue:r,selectValue:(0,l.useCallback)((e=>{if(!y({value:e,tabValues:i}))throw new Error("Can't select invalid tab value="+e);o(e),s(e),g(e)}),[s,g,i]),tabValues:i}}var h=a(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:a,selectedValue:o,selectValue:u,tabValues:s}=e;const d=[],{blockElementScrollPositionUntilNextRender:m}=(0,r.a_)(),c=e=>{const t=e.currentTarget,a=d.indexOf(t),n=s[a].value;n!==o&&(m(t),u(n))},y=e=>{var t;let a=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{var n;const t=d.indexOf(e.currentTarget)+1;a=null!=(n=d[t])?n:d[0];break}case"ArrowLeft":{var l;const t=d.indexOf(e.currentTarget)-1;a=null!=(l=d[t])?l:d[d.length-1];break}}null==(t=a)||t.focus()};return l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.A)("tabs",{"tabs--block":a},t)},s.map((e=>{let{value:t,label:a,attributes:r}=e;return l.createElement("li",(0,n.A)({role:"tab",tabIndex:o===t?0:-1,"aria-selected":o===t,key:t,ref:e=>d.push(e),onKeyDown:y,onClick:c},r,{className:(0,i.A)("tabs__item",f.tabItem,null==r?void 0:r.className,{"tabs__item--active":o===t})}),null!=a?a:t)})))}function v(e){let{lazy:t,children:a,selectedValue:n}=e;const i=(Array.isArray(a)?a:[a]).filter(Boolean);if(t){const e=i.find((e=>e.props.value===n));return e?(0,l.cloneElement)(e,{className:"margin-top--md"}):null}return l.createElement("div",{className:"margin-top--md"},i.map(((e,t)=>(0,l.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=g(e);return l.createElement("div",{className:(0,i.A)("tabs-container",f.tabList)},l.createElement(b,(0,n.A)({},e,t)),l.createElement(v,(0,n.A)({},e,t)))}function M(e){const t=(0,h.A)();return l.createElement(w,(0,n.A)({key:String(t)},e))}},40539:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>y,frontMatter:()=>r,metadata:()=>u,toc:()=>d});var n=a(58168),l=(a(96540),a(15680)),i=(a(11470),a(19365),a(22355));const r={id:"mecanim",title:"Mecanim (Avatar)",sidebar_label:"Mecanim (Avatar)",description:"Mecanim (Avatar) features that are supported by the Playable plugin",keywords:["luna","mecanim","avatar","humanoid"]},o="Mecanim Animation System",u={unversionedId:"playable/getting-started/supported-features/mecanim",id:"playable/getting-started/supported-features/mecanim",title:"Mecanim (Avatar)",description:"Mecanim (Avatar) features that are supported by the Playable plugin",source:"@site/docs/playable/getting-started/supported-features/mecanim.md",sourceDirName:"playable/getting-started/supported-features",slug:"/playable/getting-started/supported-features/mecanim",permalink:"/docs/playable/getting-started/supported-features/mecanim",draft:!1,tags:[],version:"current",frontMatter:{id:"mecanim",title:"Mecanim (Avatar)",sidebar_label:"Mecanim (Avatar)",description:"Mecanim (Avatar) features that are supported by the Playable plugin",keywords:["luna","mecanim","avatar","humanoid"]},sidebar:"gettingStarted",previous:{title:"Real Time Shadows Features",permalink:"/docs/playable/getting-started/supported-features/luna-rts"},next:{title:"WebGL2",permalink:"/docs/playable/getting-started/supported-features/webgl2"}},s={},d=[{value:'Humanoid Avatars <font color="#32CD32">(Experimental)</font>',id:"humanoid-avatars-experimental",level:2},{value:"Unity version support",id:"unity-version-support",level:3},{value:"Supported Features",id:"supported-features",level:3},{value:'<a href="https://docs.unity3d.com/Manual/RootMotion.html">RootMotion</a>',id:"rootmotion",level:4},{value:"Limitations",id:"limitations",level:3},{value:"Performance",id:"performance",level:3}],m={toc:d},c="wrapper";function y(e){let{components:t,...r}=e;return(0,l.yg)(c,(0,n.A)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,l.yg)("h1",{id:"mecanim-animation-system"},"Mecanim Animation System"),(0,l.yg)("p",null,"Unity has a rich and sophisticated animation system called Mecanim. Mecanim provides:"),(0,l.yg)("ul",null,(0,l.yg)("li",{parentName:"ul"},"Easy workflow and setup of animations on humanoid characters."),(0,l.yg)("li",{parentName:"ul"},"Animation retargeting - the ability to apply animations from one character model onto another."),(0,l.yg)("li",{parentName:"ul"},"Simplified workflow for aligning animation clips."),(0,l.yg)("li",{parentName:"ul"},"Convenient preview of animation clips, transitions and interactions between them. This allows animators to work more independently of programmers, prototype and preview their animations before gameplay code is hooked in."),(0,l.yg)("li",{parentName:"ul"},"Management of complex interactions between animations with a visual programming tool.\nAnimating different body parts with different logic.")),(0,l.yg)("h2",{id:"humanoid-avatars-experimental"},"Humanoid Avatars ",(0,l.yg)("font",{color:"#32CD32"},"(Experimental)")),(0,l.yg)("p",null,"The Mecanim Animation System is particularly well suited for working with animations for humanoid skeletons. Since humanoid skeletons are used extensively in games."),(0,l.yg)("p",null,"Because of the similarity in bone structure, it is possible to map animations from one humanoid skeleton to another, allowing retargeting and inverse kinematics. With rare exceptions, humanoid models can be expected to have the same basic structure, representing the major articulate parts of the body, head and limbs. The Mecanim system makes good use of this idea to simplify the rigging and control of animations. A fundamental step in creating a animation is to set up a mapping between the simplified humanoid bone structure understood by Mecanim and the actual bones present in the skeleton; in Mecanim terminology, this mapping is called an Avatar."),(0,l.yg)("div",null,(0,l.yg)("img",{src:"/assets/mecanim/humanoid.gif",width:"300"})," ",(0,l.yg)("img",{src:"/assets/mecanim/humanoid2.gif",width:"496"})),(0,l.yg)("h3",{id:"unity-version-support"},"Unity version support"),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("th",{style:{width:"200px"}},"Version")),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"2020.1 - 2020.3")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"2021.1 - 2021.3")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"2022.1 - 2022.3")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"2023.1")))),(0,l.yg)("h3",{id:"supported-features"},"Supported Features"),(0,l.yg)("p",null,"Mecanim support provides basic playback of humanoid animations. Available animator options:"),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("th",{style:{width:"200px"}},"Animator Layer")),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"Width")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Blending")))),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("th",{style:{width:"200px"}},"Animator State")),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"Motion")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Speed")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Multiplier")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Mirror")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"CycleOffset")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"WriteDefault")))),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("th",{style:{width:"200px"}},"Animator State Transition")),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"Has exit time")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"No exit time")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Fixed duration")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Transition duration")))),(0,l.yg)("h4",{id:"rootmotion"},(0,l.yg)("a",{href:"https://docs.unity3d.com/Manual/RootMotion.html"},"RootMotion")),(0,l.yg)("p",null,(0,l.yg)("img",{alt:"images-small",src:a(85642).A,width:"1010",height:"1010"})),(0,l.yg)("p",null,"Now we support basic RootMotion features:"),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("th",{style:{width:"200px"}},"Feature"),(0,l.yg)("th",{style:{width:"200px"}},"Description")),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"Builtin RootMotion"),(0,l.yg)("td",null,"Builtin RootMotion is RM which calculation based on data provided from animation clip or/with respect to physics systems.",(0,l.yg)("br",null),"Could be manually applied in user defined callbacks ( OnAnimatorMove, OnStateMove ) by calling ",(0,l.yg)("code",null,"Animator.ApplyBuiltinRootMotion()"),".")),(0,l.yg)("tr",null,(0,l.yg)("td",null,"MonoBehaviour.OnAnimatorMove"),(0,l.yg)("td",null," Callback for processing animation movements for modifying root motion. This callback will be invoked at each frame after the state machines and the animations have been evaluated.",(0,l.yg)("br",null),(0,l.yg)(i.A,{language:"java",title:"OnAnimatorMove Example",showLineNumbers:!0,mdxType:"CodeBlock"},'void OnAnimatorMove() {\n    Animator animator = GetComponent<Animator>();\n    if (animator) {\n        Vector3 newPosition = transform.position;\n        newPosition.x += animator.GetFloat( "Runspeed" ) * Time.deltaTime;\n        transform.position = newPosition;\n    }\n',"}"))),(0,l.yg)("tr",null,(0,l.yg)("td",null,"StateMachineBehaviour.OnStateMove"),(0,l.yg)("td",null,"Called right after MonoBehaviour.OnAnimatorMove.")))),(0,l.yg)("h3",{id:"limitations"},"Limitations"),(0,l.yg)("p",null,"For now Humanoid animations feature are limited with Forward Kinematics step. Currently not supported features you can see is such table:"),(0,l.yg)("table",null,(0,l.yg)("thead",null,(0,l.yg)("th",{style:{width:"200px"}},"Features"),(0,l.yg)("th",{style:{width:"300px"}},"Supported"),(0,l.yg)("th",{style:{width:"500px"}},"Details")),(0,l.yg)("tbody",null,(0,l.yg)("tr",null,(0,l.yg)("td",null,"Blend Tree"),(0,l.yg)("td",null,"No"),(0,l.yg)("td",null,(0,l.yg)("a",{href:"https://docs.unity3d.com/Manual/class-BlendTree.html"},"Blend Tree overview"))),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Sub-StateMachine"),(0,l.yg)("td",null,"No"),(0,l.yg)("td",null,(0,l.yg)("a",{href:"https://docs.unity3d.com/Manual/NestedStateMachines.html"},"Sub/Nested StateMachine overview"))),(0,l.yg)("tr",null,(0,l.yg)("td",null,"Inverse Kinematics (IK)"),(0,l.yg)("td",null,"No"),(0,l.yg)("td",null,(0,l.yg)("a",{href:"https://docs.unity3d.com/Manual/InverseKinematics.html"},"Inverse Kinematics (IK) overview"))))),(0,l.yg)("h3",{id:"performance"},"Performance"),(0,l.yg)("admonition",{title:"Important",type:"danger"},(0,l.yg)("p",{parentName:"admonition"},"Mecanim may negatively impact performance on some devices, or they may not work at all. This could be related to the device specific limitations. In order to resolve this issue, try decrease amount of active humanoid characters.")))}y.isMDXComponent=!0},85642:(e,t,a)=>{a.d(t,{A:()=>n});const n=a.p+"assets/images/applyMotion-2543d8e26c2f255c075e33e52bf084a6.gif"}}]);